# take-while(p?, l):
#   if(l nil?, [],
#      if(l head p?,
#         cons(l head, take-while(p?, l tail)),
#         take-while(p?, l tail)))


take-while(p?, l): {
  aux(xs, prefix): if(not(xs nil?) ∧ (xs head p?), aux(xs tail, cons(xs head, prefix)), prefix reverse)
}.aux(l, [])

take-until(p?, l): take-while(p? complement, l)




` "'split-at(n, l) - split list in to at `n`th item and return pair."
split-at(n, l): {
  aux(n, xs, prefix): if((xs nil?) ∨ (n zero?), [prefix reverse, xs], aux(n dec, xs tail, cons(xs head, prefix)))
}.aux(n, l, [])


ns: ints-from(0) split-at(4) first
