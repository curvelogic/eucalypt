version: 2
jobs:

  #######################
  # Build and Unit Test #
  #######################
  build:
    docker:
      - image: curvelogic/docker-circleci-haskell
    steps:
      - checkout

      - run:
          name: make recent eu binary available
          command: |
            cd ci
            pipenv install
            pipenv run python fetch.py /usr/local/bin
            eu --version

      - restore_cache:
          keys:
            - cache-{{ checksum "stack.yaml" }}-{{ checksum "package.yaml" }}
            - cache-{{ checksum "stack.yaml" }}-

      - run: stack setup

      - run:
          name: create script for setting environment
          command: |
            echo "export PATH=$(stack path --local-bin):$PATH" >> /tmp/env.sh
            echo "export STACK_DIST_DIR=$(stack path --dist-dir)" >> /tmp/env.sh
            echo "export STACK_LOCAL_HPC_ROOT=$(stack path --local-hpc-root)" >> /tmp/env.sh
            cat /tmp/env.sh

      - run:
          name: pull deps
          command: |
            stack build --fast --pedantic --no-terminal --test --coverage --no-run-tests --only-dependencies

      - run:
          name: install HLint
          command: |
            source /tmp/env.sh
            stack install --no-terminal hlint

      - save_cache:
          paths:
            - ~/.stack
          key: cache-{{ checksum "stack.yaml" }}-{{ checksum "package.yaml" }}

      - run:
          name: update build metadata in package.yaml
          command: |
            export OSTYPE=$(uname)
            export HOSTTYPE=$(uname -m)
            eu ci/build.eu > new-package.yaml
            mv -f new-package.yaml package.yaml
            echo --- replaced package.yaml ---
            cat package.yaml

      - run:
          name: build, test and lint
          command: |
            source /tmp/env.sh
            stack build --fast --pedantic --no-terminal --test --coverage --exec "hlint ."

      - run:
          name: build release binary (optimised)
          command: stack build --no-terminal --ghc-options="-O2"

      - run:
          name: check build metadata in generated executable
          command: stack exec eu -- -e eu.build

      - run:
          name: copy metadata for workspace
          command: cp package.yaml .stack-work

      - persist_to_workspace:
          root: .stack-work
          paths:
            - dist
            - package.yaml

      - run:
          name: prepare artifacts
          command: |
            mkdir -p /tmp/artifacts
            source /tmp/env.sh
            cp -R $STACK_DIST_DIR /tmp/artifacts/dist
            cp -R $STACK_LOCAL_HPC_ROOT /tmp/artifacts/coverage
            cp package.yaml /tmp/artifacts

      - store_artifacts:
          path: /tmp/artifacts

  ###############################################################
  # Test the Linux Executable against the acceptance test suite #
  ###############################################################
  acceptance:

    machine: true

    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: mkdir /tmp/artifacts
      - run:
          command: "docker run -t -v /tmp/workspace:/tmp/workspace
                               -v /tmp/artifacts:/tmp/artifacts
                               -e EXECUTABLE=/tmp/workspace/dist/x86_64-linux/Cabal-2.4.0.1/build/eu/eu
                               -e GHCRTS=-N2
                               curvelogic/eucalypt-test-harness:${CIRCLE_SHA1}
                               pipenv run ./eut.py -o /tmp/artifacts"
      - store_artifacts:
          path: /tmp/artifacts

  #############################################
  # Crude benchmarking to spot general trends #
  #############################################
  benchmark:

    machine: true

    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: mkdir /tmp/artifacts
      - run:
          command: "docker run -t -v /tmp/workspace:/tmp/workspace
                               -v /tmp/artifacts:/tmp/artifacts
                               -e EXECUTABLE=/tmp/workspace/dist/x86_64-linux/Cabal-2.4.0.1/build/eu/eu
                               -e GHCRTS=-N2
                               curvelogic/eucalypt-test-harness:${CIRCLE_SHA1}
                               pipenv run ./eut.py -b -n 25 -o /tmp/artifacts"

      - store_artifacts:
          path: /tmp/artifacts

  ###########################################
  # Copy release binaries to GitHub release #
  ###########################################
  release:

    docker:
      - image: circleci/python:3.7.1-stretch

    steps:
      - checkout
      - run: |
          cd ci
          pipenv install
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          cd ci
          pipenv run python release.py /tmp/workspace/dist/x86_64-linux/Cabal-2.4.0.1/build/eu/eu


  #########################################
  # Generate some basic profiling reports #
  #########################################
  profile:
    docker:
      - image: curvelogic/docker-circleci-haskell
    steps:
      - checkout

      - restore_cache:
          keys:
            - prof-cache-{{ checksum "stack.yaml" }}-{{ checksum "package.yaml" }}
            - prof-cache-{{ checksum "stack.yaml" }}-

      - run: stack setup

      - run: stack install profiterole

      - run:
          name: Build optimised
          command: stack build --profile --ghc-options="-O2"

      - run:
          name: Profile (optimised)
          command: |
            stack exec eu -- -e "foldl(+, 0, repeat(1) take(1000))" +RTS -S
            stack exec eu -- -e "foldl(+, 0, repeat(1) take(1000))" +RTS -p -L250
            stack exec eu -- -e "foldl(+, 0, repeat(1) take(1000))" +RTS -hc -L250
            mkdir -p /tmp/artifacts
            cp eu.prof /tmp/artifacts/eu-${CIRCLE_BUILD_NUM}.prof
            cp eu.hp /tmp/artifacts/eu-${CIRCLE_BUILD_NUM}.hp
            stack exec profiterole -- /tmp/artifacts/eu-${CIRCLE_BUILD_NUM}.prof

      - save_cache:
          paths:
            - ~/.stack
          key: prof-cache-{{ checksum "stack.yaml" }}-{{ checksum "package.yaml" }}

      - store_artifacts:
          path: /tmp/artifacts

  ############################################################
  # Create test harness docker image for testing executables #
  ############################################################
  build-test-harness:
    machine: true
    steps:
      - checkout
      - run:
          name: Build application Docker image
          command: |
            docker build -t eucalypt-test-harness harness
      - deploy:
          name: Push application Docker image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker tag eucalypt-test-harness "curvelogic/eucalypt-test-harness:${CIRCLE_SHA1}"
            docker push "curvelogic/eucalypt-test-harness:${CIRCLE_SHA1}"
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag eucalypt-test-harness "curvelogic/eucalypt-test-harness:latest"
              docker push "curvelogic/eucalypt-test-harness:latest"
            fi

  ###########################
  # Deploy docs to gh-pages #
  ###########################
  deploy-docs:

    docker:
      - image: circleci/python:3.7.1-stretch

    steps:
      - add_ssh_keys:
          fingerprints:
            - "4a:fd:ee:26:01:f2:41:d1:71:f6:b5:a0:1a:59:9e:a0"
      - checkout
      - run: pipenv install mkdocs
      - attach_workspace:
          at: /tmp/workspace
      - run: pipenv run mkdocs gh-deploy

  ######################
  # Build macos binary #
  ######################
  build-mac-binary:
    macos:
      xcode: "10.1.0"
    environment:
      HOMEBREW_NO_INSTALL_CLEANUP: 1
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: brew install ghc
      - run: brew install haskell-stack
      - run: brew install pcre
      - run: brew install pkg-config
      - run:
          name: brew install eucalypt
          command: brew install curvelogic/homebrew-tap/eucalypt
          no_output_timeout: 20m
      - checkout
      - restore_cache:
          keys:
            - macos-cache-{{ checksum "stack.yaml" }}-{{ checksum "package.yaml" }}
            - macos-cache-{{ checksum "stack.yaml" }}-
      - run: stack setup
      - run:
          name: Create script for setting environment
          command: |
            echo "export PATH=$(stack path --local-bin):$PATH" >> /tmp/env.sh
            echo "export STACK_DIST_DIR=$(stack path --dist-dir)" >> /tmp/env.sh
            cat /tmp/env.sh
      - run:
          name: use package.yaml generated by linux build for versions
          command: cp /tmp/workspace/package.yaml package.yaml
      - run: stack build --test --no-terminal --ghc-options="-O2"
      - run:
          name: check build metadata for generated executable
          command: stack exec eu -- -e eu.build
      - save_cache:
          paths:
            - ~/.stack
          key: macos-cache-{{ checksum "stack.yaml" }}-{{ checksum "package.yaml" }}
      - run:
          name: prepare artifacts
          command: |
            mkdir -p /tmp/artifacts
            source /tmp/env.sh
            cp -R $STACK_DIST_DIR /tmp/artifacts/dist
      - store_artifacts:
          path: /tmp/artifacts


workflows:
  version: 2
  build-workflow:
    jobs:
      - build-test-harness:
          context: curvelogic-docker-hub
      - build:
          context: curvelogic-docker-hub
      - acceptance:
          context: curvelogic-docker-hub
          requires:
            - build
            - build-test-harness
      - benchmark:
          context: curvelogic-docker-hub
          requires:
            - build
            - build-test-harness
      - profile:
          context: curvelogic-docker-hub
          requires:
            - build
      - build-mac-binary:
          requires:
            - build
      - release:
          context: curvelogic-github-api
          requires:
            - acceptance
          filters:
            branches:
              only: master
      - deploy-docs:
          context: curvelogic-github-api
          requires:
            - acceptance
          filters:
            branches:
              only: master
