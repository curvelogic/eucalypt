version: 2
jobs:

  # Build and unit test the eu executable
  build:
    docker:
      - image: curvelogic/docker-circleci-haskell
    steps:
      - checkout

      - run:
          name: Make a recent eu binary available to the build
          command: |
            cd ci
            pipenv install
            pipenv run python fetch.py /usr/local/bin
            eu --version

      - restore_cache:
          keys:
            - cache-{{ checksum "stack.yaml" }}-{{ checksum "package.yaml" }}
            - cache-{{ checksum "stack.yaml" }}-

      - run: stack setup

      - run:
          name: Create script for setting environment
          command: |
            echo "export PATH=$(stack path --local-bin):$PATH" >> /tmp/env.sh
            echo "export STACK_DIST_DIR=$(stack path --dist-dir)" >> /tmp/env.sh
            echo "export STACK_LOCAL_HPC_ROOT=$(stack path --local-hpc-root)" >> /tmp/env.sh
            cat /tmp/env.sh

      - run:
          name: Pull dependencies and build
          command: stack build --fast --pedantic --no-terminal --test --coverage --no-run-tests

      - run:
          name: Install HLint
          command: |
            source /tmp/env.sh
            stack install --no-terminal hlint

      - save_cache:
          paths:
            - ~/.stack
          key: cache-{{ checksum "stack.yaml" }}-{{ checksum "package.yaml" }}

      - run:
          name: Update build / release details in package.yaml
          command: |
            export OSTYPE=$(uname)
            export HOSTTYPE=$(uname -m)
            eu package=package.yaml ci/build.eu > new-package.yaml
            mv -f new-package.yaml package.yaml
            echo --- replaced package.yaml ---
            cat package.yaml

      - run:
          name: Build, run unit tests with coverage
          command: stack build --fast --pedantic --no-terminal --test --coverage

      - run:
          name: Run HLint
          command: |
            source /tmp/env.sh
            hlint .

      - run:
          name: Build without coverage
          command: stack build --pedantic --no-terminal --ghc-options="-O2"

      - run:
          name: Check build metadata for generated executable
          command: stack exec eu -- -e 'eu.build'

      - persist_to_workspace:
          root: .stack-work
          paths:
            - dist

      - run:
          name: Prepare artifacts
          command: |
            mkdir -p /tmp/artifacts
            source /tmp/env.sh
            cp -R $STACK_DIST_DIR /tmp/artifacts/dist
            cp -R $STACK_LOCAL_HPC_ROOT /tmp/artifacts/coverage

      - store_artifacts:
          path: /tmp/artifacts

  # Test against the eucalypt test suite
  acceptance:

    machine: true

    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          command: "docker run -t -v /tmp/workspace:/tmp/workspace
                               -e EXECUTABLE=/tmp/workspace/dist/x86_64-linux/Cabal-2.4.0.1/build/eu/eu
                               curvelogic/eucalypt-test-harness:latest
                               pipenv run ./eut.py "

  # Crude benchmarking to spot general trends
  benchmark:

    machine: true

    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          command: "docker run -t -v /tmp/workspace:/tmp/workspace
                               -e EXECUTABLE=/tmp/workspace/dist/x86_64-linux/Cabal-2.4.0.1/build/eu/eu
                               curvelogic/eucalypt-test-harness:latest
                               pipenv run ./eut.py -b -n 25 "


  release:

    docker:
      - image: circleci/python:3.7.1-stretch

    steps:
      - checkout
      - run: |
          cd ci
          pipenv install
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          cd ci
          pipenv run python release.py /tmp/workspace/dist/x86_64-linux/Cabal-2.4.0.1/build/eu/eu

workflows:
  version: 2
  build-workflow:
    jobs:
      - build:
          context: curvelogic-docker-hub
      - acceptance:
          context: curvelogic-docker-hub
          requires:
            - build
      - benchmark:
          context: curvelogic-docker-hub
          requires:
            - build
      - release:
          context: curvelogic-github-api
          requires:
            - acceptance
          filters:
            branches:
              only: master
