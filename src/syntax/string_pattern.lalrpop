use std::str::FromStr;
use crate::syntax::ast;
use crate::syntax::error::{SyntaxError};
use crate::syntax::string_lexer::{Token};
use codespan::{ByteIndex, Span};

grammar<'text>;

pub StringPattern: Vec<ast::StringChunk> =
    <v: StringChunk*> => v;

StringChunk: ast::StringChunk = {
    <l: @L> <s:EscapedOpen> <r: @R> => ast::StringChunk::LiteralContent(Span::new(l, r), s),
    <l: @L> <s:EscapedClose> <r: @R> => ast::StringChunk::LiteralContent(Span::new(l, r), s),
    <l: @L> <q:InterpolationRequest> <r: @R> => ast::StringChunk::Interpolation(Span::new(l, r), q),
    <l: @L> <s:LiteralContent> <r: @R> => ast::StringChunk::LiteralContent(Span::new(l, r), s),
}

InterpolationRequest: ast::InterpolationRequest = {
    <l: @L> "{" <i:InterpolationTarget> "}" <r: @R> => ast::InterpolationRequest::new(Span::new(l, r), i, None, None),
    <l: @L> "{" <i:InterpolationTarget> <f:FormatSpecifier> "}" <r: @R> => ast::InterpolationRequest::new(Span::new(l, r), i, f, None),
    <l: @L> "{" <i:InterpolationTarget> <f:FormatSpecifier> <c:ConversionSpecifier> "}" <r: @R>  => ast::InterpolationRequest::new(Span::new(l, r), i, f, c),
}


InterpolationTarget: ast::InterpolationTarget = {
    <l: @L> <i:"number"?> <r: @R> => ast::InterpolationTarget::StringAnaphor(Span::new(l, r), i.and_then(|s| i32::from_str(s).ok())),
    <r:DottedReference> => r,
}

EscapedOpen: String = "{{" => "{".to_string();

EscapedClose: String = "}}" => "}".to_string();

LiteralContent: String = <s:"lit"> => s.to_string();

FormatSpecifier: Option<String> = ":" <f:"content"?> => f.map(str::to_string);

ConversionSpecifier: Option<String> = ":" <c:"content"?> => c.map(str::to_string);

Reference: ast::Name = <l: @L> <s:"content"> <r: @R> => ast::normal_at(Span::new(l, r), s);

DottedReference: ast::InterpolationTarget =
    <l: @L> <v: (<Reference> ".")*> <e: Reference> <r: @R>  => {
	let mut v = v;
	v.push(e);
	ast::InterpolationTarget::Reference(Span::new(l, r), v)
    };

extern {

    type Location = ByteIndex;
    type Error = SyntaxError;

    enum Token<'text> {
	"{{" => Token::EscapedOpenBrace,
	"}}" => Token::EscapedCloseBrace,
	"{" => Token::OpenBrace,
	"}" => Token::CloseBrace,
	":" => Token::Colon,
	"." => Token::Dot,
	"number" => Token::Number(<&'text str>),
	"lit" => Token::Literal(<&'text str>),
	"content" => Token::InterpolationContent(<&'text str>),
    }
}
