name: Eucalypt Build Pipeline

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      narrative:
        description: 'Reason for build'
        required: false

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]

    include:
      - os: macOS-latest
        brew:
          - haskell-stack
          - pcre
          - pkg-config

    runs-on: ${{ matrix.os }}

    steps:

    - uses: actions/checkout@v2

    - name: Setup stack
      uses: mstksg/setup-stack@v1

    - name: Install OS Packages
      uses: mstksg/get-package@v1
      with:
        apt-get: ${{ matrix.apt-get }}
        brew: ${{ matrix.brew }}

    - name: Install latest eucalypt
      run: |
          pip install pipenv
          mkdir bin
          cd ci
          pipenv install
          pipenv run python fetch.py $GITHUB_WORKSPACE/bin
          cd $GITHUB_WORKSPACE
          ls $GITHUB_WORKSPACE/bin
          chmod +x $GITHUB_WORKSPACE/bin/eu
          echo "::add-path::$GITHUB_WORKSPACE/bin"
          $GITHUB_WORKSPACE/bin/eu --version
      env:
        GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: actions/setup-haskell@v1
      with:
        ghc-version: '8.8.2'
        cabal-version: '3.0'

    - name: Cache
      uses: actions/cache@v1
      env:
        cache-name: cache-stack
      with:
        path: ~/.stack
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('package.yaml') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Add Stack paths to environment
      run: |
          echo "::set-env name=STACK_DIST_DIR::$(stack path --dist-dir)"

    - name: Install dependencies
      run: stack build --fast --pedantic --no-terminal --install-ghc --only-dependencies

    - name: Update build metadata in package.yaml
      run: |
        export OSTYPE=$(uname)
        export HOSTTYPE=$(uname -m)
        pwd
        ls -al $GITHUB_WORKSPACE
        $GITHUB_WORKSPACE/bin/eu ci/build.eu > new-package.yaml
        mv -f new-package.yaml package.yaml
        echo --- replaced package.yaml ---

    - name: Build
      run: stack build --fast --pedantic --no-terminal --test

    - name: Install HLint
      run: stack build --fast --no-terminal hlint

    - name: HLint
      run: stack exec hlint .

    - name: Upload binaries
      uses: actions/upload-artifact@v1
      with:
        name: dist-${{ runner.os }}
        path: ${{ env.STACK_DIST_DIR }}

  build-test-harness:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: curvelogic/eucalypt-test-harness
        path: harness
        tag_with_ref: true
        tag_with_sha: true

  run-acceptance-tests:
    runs-on: ubuntu-latest
    needs:
      - build
      - build-test-harness
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: dist-${{ runner.os }}
          path: dist
      - run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - run: |
          mkdir output
          docker run -t -v $GITHUB_WORKSPACE:/tmp/workspace \
                        -v $GITHUB_WORKSPACE/output:/tmp/output \
                        -e EXECUTABLE=/tmp/workspace/dist/build/eu/eu \
                        -e GHCRTS=-N2 \
                        curvelogic/eucalypt-test-harness:${{ github.sha }} \
                        bash -c 'pipenv install && pipenv run ./eut.py -o /tmp/output

  run-benchmarks:
    runs-on: ubuntu-latest
    needs:
      - build
      - build-test-harness
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: dist-${{ runner.os }}
          path: dist
      - run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - run: |
          mkdir output
          docker run -t -v $GITHUB_WORKSPACE:/tmp/workspace \
                        -v $GITHUB_WORKSPACE/output:/tmp/output \
                        -e EXECUTABLE=/tmp/workspace/dist/build/eu/eu \
                        -e GHCRTS=-N2 \
                        curvelogic/eucalypt-test-harness:${{ github.sha }} \
                        pipenv run ./eut.py -b -n 25 -o /tmp/output
