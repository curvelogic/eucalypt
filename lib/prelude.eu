"eucalypt standard prelude"

##
## Prelude versioning and run metadata
##
eu: {
  ` "Metadata about this version of the standard prelude"
  prelude: {
    version: "0.1.0"
  }

  ` "Metadata about this version of the eucalypt executable"
  build: __build
}

` "IO related declarations"
io: {
  ` "Read access to environent variables at time of launch"
  env: __io.ENV

  epoch-time: __io.EPOCHTIME
}


##
## Error / debug support
##

` "`panic(s)` - raise runtime error with message string `s`."
panic: __PANIC

` "`assert(c, s, v)` - if `c` is true then value `v` otherwise error with message `s`."
assert(c, s, v): if(c, v, panic(s))

##
## Essentials
##

` "A null value. To export as `null` in JSON or ~ in YAML."
null: __NULL

` "`true` - constant logical true"
true: __TRUE

` "`false` - constant logical false"
false: __FALSE

` "`if(c, t, f)` - if `c` is `true`, return `t` else `f`."
if: __IF

` "`then(t, f, c)` - for pipeline if: - `x? then(t, f)``"
then(t, f, c): if(c, t, f)

` "`when(p?, f, x)` - when `x` satisfies `p?` apply `f` else pass through unchanged."
when(p?, f, x): if(x p?, x f, x)

##
## List basics
##

` "`cons(h, t)` - construct new list by prepending item `h` to list `t`."
cons: __CONS

` "`head(xs)` - return the head item of list `xs`, panic if empty."
head: __HEAD

` "`nil?(xs)` - `true` if list `xs` is empty, `false` otherwise."
nil?: = []

` "`head-or(xs, d)` - return the head item of list `xs` or default `d` if empty."
head-or(d, xs): xs nil? then(xs head, d)

` "`tail(xs)` - return list `xs` without the head item. [] causes error."
tail: __TAIL

` "`tail-or(xs, d)` - return list `xs` without the head item or `d` for empty list."
tail-or(d, xs): xs nil? then(d, xs tail)

` "`nil` - identical to `[]`, the empty list."
nil: []

` "`first(xs)` - return first item of list `xs` - error if the list is empty."
first: head

` "`second(xs)` - return second item of list - error if there is none."
second(xs): xs tail head

` "`second-or(xs, d)` - return second item of list - default `d` if there is none."
second-or(d, xs): xs tail-or([d]) head-or(d)

##
## Blocks / merge
##

` "`sym(s)` - create symbol with name given by string `s`."
sym: __SYM

` "`merge(b1, b2)` - shallow merge block `b2` on top of `b1`."
merge: __MERGE

` "`deep-merge(b1, b2)` - deep merge block `b2` on top of `b1`, merges nested blocks but not lists."
deep-merge: __DEEPMERGE

` { doc: "`l << r` - deep merge block `r` on top of `l`, merging nested blocks, not lists."
    export: :suppress
    associates: :left
    precedence: :append }
(l << r): __DEEPMERGE(l, r)

` "`elements(b)` - expose list of elements of block `b`."
elements: __ELEMENTS

` "`block(kvs)` - (re)construct block from list `kvs` of elements."
block: __BLOCK

` "`has(s, b)` - true if and only if block `b` has key (symbol) `s`."
has(s, b): b map-values(const(true)) lookup-or(s, false)

` "`lookup(s, b)` - look up symbol `s` in block `b`, error if not found."
lookup(s, b): __LOOKUP(s, b)

` "`lookup-in(b, s)` - look up symbol `s` in block `b`, error if not found."
lookup-in(b, s): __LOOKUP(s, b)

` "`lookup-or(s, d, b)` - look up symbol `s` in block `b`, default `d` if not found."
lookup-or(s, d, b): __LOOKUPOR(s, d, b)

` "`lookup-or-in(b, s, d)` - look up symbol `s` in block `b`, default `d` if not found."
lookup-or-in(b, s, d): lookup-or(s, d, b)

` "`lookup-alts(syms, d, b)` - look up symbols `syms` in turn in block `b` until a value is found, default `d` if none."
lookup-alts(syms, d, b): foldr(lookup-or-in(b), d, syms)

` "`lookup-in-alts(bs, s, d)` - look up symbol `s` in turn in each of blocks `bs` until a value is found, default `d` if none."
lookup-across(s, d, bs): {
  f(b, acc): lookup-or(s, acc, b)
}.(foldr(f, d, bs))

` "`lookup-path(ks, b)` - look up value at key path `ks` in block `b`"
lookup-path(ks, b): foldl(lookup-in, b, ks)

##
## Boolean
##

` "`not(b) - toggle boolean."
not: __NOT

` { doc: "`!x` - not x, toggle boolean."
    precedence: :bool-unary }
(! b): b not

` { doc: "`¬x` - not x, toggle boolean."
    precedence: :bool-unary }
(¬ b): b not

` { doc: "`l && r` - true if and only if `l` and `r` are true."
    export: :suppress
    associates: :left
    precedence: :bool-prod }
(l && r): __AND(l, r)

` "`and(l, r)` - true if and only if `l` and `r` are true."
and: __AND

` { doc: "`l ∧ r` - true if and only if `l` and `r`"
    export: :suppress
    associates: :left
    precedence: :bool-prod }
(l ∧ r): l && r

` "`or(l, r)` - true if and only if `l` or `r` is true."
or: __OR

` { doc: "`l || r` - true if and only if `l` or `r`"
    export: :suppress
    associates: :left
    precedence: :bool-sum }
(l || r): __OR(l, r)

` { doc: "`l ∨ r` - true if and only if `l` or `r`"
    export: :suppress
    associates: :left
    precedence: :bool-sum }
(l ∨ r): l || r

##
## Polymorphic equality, NB. while rendering disregards lambdas,
## equality does not, so values that appear equal may differ in the
## presence of lambdas.
##

` { doc: "`l = r` - `true` if and only if value `l` equals value `r`."
    export: :suppress
    associates: :left
    precedence: :eq }
(l = r): __EQ(l, r)

` { doc: "`l != r` - `true` if and only if value `l` is not equal to value `r`."
    export: :suppress
    associates: :left
    precedence: :eq }
(l != r): not(__EQ(l, r))

##
## Arithmetic
##

` { doc: "`l + r` - adds `l` and `r`; both must be numbers."
    export: :suppress
    associates: :left
    precedence: :sum }
(l + r): __ADD(l, r)

` { doc: "`l - r` - subtracts `r` from `l`; both must be numbers."
    export: :suppress
    associates: :left
    precedence: :sum }
(l - r): __SUB(l, r)

` { doc: "`l * r` - multiplies `l` and `r`; both must be numbers."
    export: :suppress
    associates: :left
    precedence: :prod }
(l * r): __MUL(l, r)

` { doc: "`l / r` - divides `l` by `r`; both must be numbers; error `r` is zero."
    export: :suppress
    associates: :left
    precedence: :prod }
(l / r): __DIV(l, r)

` { doc: "`l % r` - modulus of `l` by `r`; both must be numbers; error `r` is zero."
    export: :suppress
    associates: :left
    precedence: :prod }
(l % r): __MOD(l, r)

` { doc: "`l < r` - `true` if and only if number `l` is less than number `r`."
    export: :suppress
    associates: :left
    precedence: :cmp }
(l < r): __LT(l, r)

` { doc: "`l > r` - `true` if and only if number `l` is greater than number `r`."
    export: :suppress
    associates: :left
    precedence: :cmp }
(l > r): __GT(l, r)

` { doc: "`l <= r` - `true` if and only if number `l` is less than or equal to number `r`."
    export: :suppress
    associates: :left
    precedence: :cmp }
(l <= r): __LTE(l, r)

` { doc: "`l >= r` - `true` if and only if number `l` is greater than or equal to number `r`."
    export: :suppress
    associates: :left
    precedence: :cmp }
(l >= r): __GTE(l, r)

` "`inc(x)` - increment number `x` by 1."
inc: _ + 1

` "`dec(x)` - decrement number `x` by 1."
dec: _ - 1

` "`negate(n)` - negate number `n`"
negate: 0 -

` "`∸ n` - unary minus; negate."
(∸ n): negate(n)

` "`zero?(n)` - return true if and only if number `n` is 0."
zero?: = 0

` "`pos?(n)` - return true if and only if number `n` is strictly positive"
pos?: > 0

` "`neg?(n)` - return true if and only if number `n` is strictly negative"
neg?: < 0

` "`num(s)` - parse number from string"
num: __NUMPARSE

` "`floor(n)` - round number downwards to nearest integer"
floor: __FLOOR

` "`ceiling(n)` - round number upwards to nearest integer"
ceiling: __CEILING

` "`max(l, r) - return max of numbers `l` and `r`"
max(l, r): if(l > r, l, r)

` "`max-of(l) - return max element in list of numbers `l` - error if empty`"
max-of(l): cond( [[l nil?,      panic("max of empty list")]
               , [count(l) = 1, l head]]
	       , max(l head, max-of(l tail)))

` "`min(l, r) - return min of numbers `l` and `r`"
min(l, r): if(l < r, l, r)

` "`min-of(l) - return min element in list of numbers `l` - error if empty`"
min-of(l): cond( [[l nil?,      panic("min of empty list")]
               , [count(l) = 1, l head]]
	       , min(l head, min-of(l tail)))

##
## Text and regexes
##
` { doc:"We don't support the usual string escapes so these make it
a little more convenient to use interpolation instead.."
    export: :suppress }
ch: {
  n: "
"
  t: "	"

  dq: __DQ
}

` "String processing functions"
str: {

  ` "of(e) - convert `e` to string."
  of: __STR

  ` "split(s, re) - split string `s` on separators matching regex `re`."
  split: __SPLIT

  ` "split-on(re, s) - split string `s` on separators matching regex `re`."
  split-on: split flip

  ` "join(l, s) - join list of strings `l` by interposing string s."
  join: __JOIN

  ` "join-on(s, l) - join list of strings `l` by interposing string s."
  join-on: join flip

  ` "match(s, re) - match string `s` using regex `re`, return list of full match then capture groups."
  match: __MATCH

  ` "match-with(re, s) - match string `s` using regex `re`, return list of full match then capture groups."
  match-with: match flip

  ` "extract(re, s) - use regex `re` (with single capture) to extract substring of s - or error."
  extract(re): second ∘ match-with(re) 

  ` "extract-or(re, d, s) - use regex `re` (with single capture) to extract substring of `s` - or default `d`."
  extract-or(re, d, s): s match-with(re) second-or(d)

  ` "matches(s, re) - return list of all matches in string `s` of regex `re`."
  matches: __MATCHES

  ` "matches-of(re, s) - return list of all matches in string `s` of regex `re`."
  matches-of: matches flip

  ` "matches?(re, s) - return true if `re` matches full string `s`."
  matches?(re, s): match(s, re) (not ∘ nil?)

  ` "suffix(b, a) - return string `b` suffixed onto `a`."
  suffix(b, a): [a, b] join-on("")

  ` "prefix(b, a) - return string `b` prefixed onto `a`."
  prefix(b, a): [b, a] join-on("")

  ` "letters(s) - return individual letters of `s` as list of strings."
  letters: __LETTERS

  ` "`len(s)` - return length of string in characters."
  len: count ∘ letters

  ` "`fmt(x, spec)` - format `x` using printf-style format `spec`."
  fmt: __FMT

  ` "`to-upper(s)` - convert string `s` to upper case."
  to-upper: __UPPER

  ` "`to-lower(s)` - convert string `s` to lower case."
  to-lower: __LOWER
}

##
## Combinators
##

` "`identity(v)` - identity function, return value `v`."
identity(v): v

` "`const(k)` - return single arg function that always returns `k`."
const(k, _): k

` "`(-> k)` - const; return single arg function that always returns `k`."
(-> k): const(k)

` "`compose(f,g,x)` - apply function `f` to `g(x)`."
compose(f, g, x): x g f

` { doc: "`(f ∘ g)` - return composition of `f` and `g` (`g` then `f`)"
    export: :suppress
    associates: :right
    precedence: 88 }
(f ∘ g): compose(f, g)

` { doc: "`(f ; g)` - return composition of `f` then `g`"
    export: :suppress
    associates: :left
    precedence: 88 }
(f ; g): compose(g, f)

` { doc: "(l @ r) - function application operator, for reversing catentation args and eliding parentheses"
    export: :suppress
    associates: :right
    precedence: :apply }
(l @ r): l(r)

` "`apply(f, xs)` - apply function `f` to arguments in list `xs`."
apply(f, xs): foldl(_0(_1), f, xs)

` "`flip(f)` - flip arguments of function `f`, flip(f)(x, y) == f(y, x)"
flip(f, x, y): f(y, x)

` "`complement(p?)` - invert truth value of predicate function."
complement(p?): compose(not, p?)

` "`curry(f)` - turn f([x, y]) into f' of two parameters (x, y)."
curry(f, x, y): f([x, y])

` "`uncurry(f)` - turn f(x, y) into f' that expects [x, y] as a list."
uncurry(f, l): f(first(l), second(l))

` "`cond(l)` - in list `l` of [condition, value] select first true condition, returning value, else default `d`."
cond(l, d): l foldr(uncurry(if), d)

` "`juxt(f, g) - return function of `x` returning list of `f(x)` and g(x)`."
juxt(f, g, x): [x f, x g]

#
# Utilities
#
` "`fnil(f, v, x)` - return a function equivalent to f except it sees `x` instead of `null` when null is passed."
fnil(f, v, x): if(x = null, f(v), f(x))

#
# Metadata basics
#

` "`with-meta(m, e)` - add metadata block `m` to expression `e`."
with-meta: __WITHMETA

` { doc: "`e // m` - add metadata block `m` to expression `e`."
    export: :suppress 
    associates: :left
    precedence: :meta }
(e // m): e with-meta(m)

` "`meta(e)` - retrieve expression metadata for e."
meta: __META

` "`merge-meta(m, e)` - merge block `m` into `e`'s metadata."
merge-meta(m, e): e // (meta(e) m)

` { doc: "`e //<< m` - merge metadata block `m` into expression `e`'s metadata."
    export: :suppress
    associates: :left
    precedence: :meta }
(e //<< m): e merge-meta(m)

assertions: {
  # In debug mode maybe the machine checks every return value against
  # metadata, but for performance reasons we only check for explicit
  # assertions.

  ` "`validator(v)` - find the validator for a value `v` in its metadata"
  validator(v): lookup-or(:assert, const(true), meta(v))

  ` "`check(v)` - true if v is valid according to assert metadata"
  check(v): v validator(v)

  ` "`checked(v)` - panic if value doesn't satisfy its validator"
  checked(v): if(check(v), v, panic("Assertion failed"))
}

` { doc: "`e //= v` - add metadata to check expression `e` evaluates to `v` and return whether valid"
    export: :suppress 
    associates: :left
    precedence: :meta }
(e //= v): e with-meta({ assert: (= v)}) assertions.check

` { doc: "`e //=> v` - add metadata to assert expression `e` evaluates to `v` and return `e`."
    export: :suppress 
    associates: :left
    precedence: :meta }
(e //=> v): e with-meta({ assert: (= v)}) assertions.checked

` { doc: "`e //=? f` - add metadata to assert expression `e` satisfies predicate `f` and return `e`."
    export: :suppress 
    associates: :left
    precedence: :meta }
(e //=? f): e with-meta({ assert: f}) assertions.checked

` { doc: "`e //!? f` - add metadata to assert expression `e` does not satisfy predicate `f` and return `e`."
    export: :suppress 
    associates: :left
    precedence: :meta }
(e //!? f): e with-meta({ assert: complement(f)}) assertions.checked

` { doc: "`e //! f` - add metadata to assert expression `e` is true and return `e`."
    export: :suppress 
    precedence: :meta }
(e //!): e with-meta({ assert: (= true) }) assertions.checked

` { doc: "`e //!! f` - add metadata to assert expression `e` is false and return `e`."
    export: :suppress 
    precedence: :meta }
(e //!!): e with-meta({ assert: (= false) }) assertions.checked

#
# List library functions, maps and folds
#

` "`take(n, l)` - return initial segment of integer `n` elements from list `l`."
take(n, l): __IF((n zero?) ∨ (l nil?), [], cons(l head, take(n dec, l tail)))
 
` "`drop(n, l)` - return result of dropping integer `n` elements from list `l`."
drop(n, l): __IF((n zero?), l, drop(n dec, l tail))

` "`take-while(p?, l)` - initial elements of list `l` while `p?` is true."
take-while(p?, l): if(l nil?, [], if(l head p?, cons(l head, take-while(p?, l tail)), take-while(p?, l tail)))

` "`take-until(p?, l)` - initial elements of list `l` while `p?` is false."
take-until(p?): take-while(p? complement)

` "`drop-while(p?, l)` - skip initial elements of list `l` while `p?` is true."
drop-while(p?, l): if(l nil?, [], if(l head p?, drop-while(p?, l tail), l))

` "`drop-until(p?, l)` - skip initial elements of list `l` while `p?` is false."
drop-until(p?): drop-while(p? complement)

` "`nth(n, l)` - return `n`th item of list if it exists, otherwise panic."
nth(n, l): l drop(n) head

` { doc: "`l !! n` - return `n`th item of list if it exists, otherwise error."
    precedence: :exp }
(l !! n): l nth(n)

` "`repeat(i)` - return infinite list of instances of item `i`."
repeat(i): __CONS(i, repeat(i))

` "`foldl(op, i, l)` - left fold operator `op` over list `l` starting from value `i` "
foldl(op, i, l): if(l nil?, i, foldl(op, op(i, l head), l tail))

` "`foldr(op, i, l)` - right fold operator `op` over list `l` ending with value `i` "
foldr(op, i, l): if(l nil?, i, op(l head, foldr(op, i, l tail)))

` "`scanl(op, i, l)` - left scan operator `op` over list `l` starting from value `i` "
scanl(op, i, l): if(l nil?, [i], scanl(op, op(i, l head), l tail) cons(i)) 

` "`scanr(op, i, l)` - right scan operator `op` over list `l` ending with value `i` "
scanr(op, i, l): if(l nil?, [i], { scan: scanr(op, i, l tail) }.(cons(op(l head, scan head), scan)))

` "`iterate(f, i) - return list of `i` with subsequent repeated applications of `f` to `i`"
iterate(f, i): cons(i, iterate(f, i) map(f))

` "`ints-from(n)` - return infinite list of integers from `n` upwards"
ints-from(n): n iterate(inc)

` "range(b, e)` - return list of ints from `b` to `e` (not including `e`)"
range(b, e): ints-from(b) take(e - b)

` "`count(l)` - return count of items in list `l`"
count(l): foldl({ n: • el: •}.(n inc), 0, l)

` "`last(l)` - return last element of list `l`"
last: head ∘ reverse

` "`cycle(l)` - create infinite list by cycling elements of list `l`"
cycle(l): if(l nil?, [], l ++ cycle(l))

` "`map(f, l)` - map function `f` over list `l`"
map(f, l): if(l nil?, l, cons(l head f, l tail map(f)))

` { doc: "`f <$> l` - map function `f` over list `l`"
    export: :suppress 
    associates: :left 
    precedence: :map }
(f <$> l): map(f, l)

` "`map(f, l1, l2)` - map function `f` over lists `l1` and `l2`, until the shorter is exhausted."
map2(f, l1, l2): if(nil?(l1) || nil?(l2), [], cons(f(l1 head, l2 head), map2(f, l1 tail, l2 tail)))

` "`zip-with(f, l1, l2)` - map function `f` over lists `l1` and `l2`, until the shorter is exhausted."
zip-with: map2

` "`zip(l1, l2)` - list of pairs of elements  `l1` and `l2`, until the shorter is exhausted."
zip: zip-with(pair)

` "`filter(p?, l)` - return list of elements of list `l` that satisfy predicate `p?`."
filter(p?, l): foldr({x: • xs: • }.(if(x p?, cons(x, xs), xs)), [], l)

` "`remove(p?, l)` - return list of elements of list `l` that do not satisfy predicate `p?`."
remove(p?, l): l filter(p? complement)

` "`append(l1, l2)` - concatenate two lists `l1` and `l2`."
append(l1, l2): foldr(cons, l2, l1)

` "`prepend(l1, l2)` - concatenate two lists with `l1` after `l2`."
prepend: flip(append)

` { doc: "`l1 ++ l2` - concatenate lists `l1` and `l2`."
    export: :suppress
    associates: :left
    precedence: :append }
(l1 ++ l2): append(l1, l2)

` "`concat(ls)` - concatenate all lists in `ls` together."
concat(ls): foldr(append, [], ls)

` "`mapcat(f, l)` - map items in l with `f` and concatenate the resulting lists."
mapcat(f): concat ∘ map(f)

` "`zip-apply(fs, vs)` - apply fns in list `fs` to corresponding values in list `vs`, until shorter is exhausted."
zip-apply(fs, vs): zip-with(_0(_1), fs, vs)

` "`reverse(l) - reverse list `l`"
reverse(l): foldl(cons flip, [], l)

` "`all-true?(l)` - true if and only if all items in list `l` are true."
all-true?(l): foldl(and, true, l)

` "`all(p?, l)` - true if and only if all items in list `l` satisfy predicate `p?`."
all(p?, l): l map(p?) all-true?

` "`any-true?(l)` - true if and only if any items in list `l` are true."
any-true?(l): foldr(or, false, l)

` "`any(p?, l)` - true if and only if any items in list `l` satisfy predicate `p?`."
any(p?, l): l map(p?) any-true?

` "`window(n, step, l)` - list of lists of sliding windows over list `l` of size `n` and offest `step`"
window(n, step, l): { chunk: l take(n) }.(if(count(chunk) >= n, cons(chunk, l drop(step) window(n, step)), []))

` "`partition(n, l)` - list of lists of non-overlapping segments of list `l` of size `n`"
partition(n): window(n, n)

` "`over-sliding-pairs(f, l)` - apply binary fn `f` to each overlapping pair in `l` to form new list"
over-sliding-pairs(f, l): l window(2, 1) map(f uncurry)

` "differences(l) - calculate difference between each overlapping pair in list of numbers `l`"
differences: over-sliding-pairs(_1 - _0)

` "`discriminate(pred, xs)` - return pair of `xs` for which `pred(_)` is true and `xs` for which `pred(_)` is false."
discriminate(pred, xs): {
  acc(a, e): a if(e pred, bimap(cons(e), identity), bimap(identity, cons(e)))
}.(xs foldl(acc, [[], []]) bimap(reverse, reverse))

` "`group-by(k, xs)` - group xs by key function returning block of key to subgroups, maintains order."
group-by(k, xs): {
  acc(a, e): a update-value-or(e._k, cons(e._v), [e._v])
}.(xs map({ _k: k(•0), _v: •0 }) foldl(acc, {}) map-values(reverse))

` "`qsort(lt, xs)` - sort `xs` using 'less-than' function `lt`"
qsort(lt, xs): if(xs nil?,
                  xs,
                  {
                    h: xs head
                    t: xs tail
                    less(x): lt(x, h)
                    partitions: t discriminate(less)
                    smaller: partitions first qsort(lt)
                    bigger: partitions second qsort(lt)
                  }.(smaller ++ [h] ++ bigger))

#
# Block library functions
#

` "`merge-all(bs)` - merge all blocks in list `bs` together, later overriding earlier."
merge-all(bs): foldl(merge, {}, bs)

` "`key(pr)` - return key in a block element / pair."
key: head

` "`value(pr)` - return key in a block element / pair."
value: second

` "`keys(b)` - return keys of block"
keys(b): b elements map(key)

` "`values(b)` - return values of block"
values(b): b elements map(value)

` "`bimap(f, g, pr)` - apply f to first item of pair and g to second, return pair."
bimap(f, g, pr): [f(first(pr)), g(second(pr))]

` "`map-first(f, prs)` - apply f to first elements of all pairs in list of pairs `prs`."
map-first(f, prs): map(bimap(f, identity), prs)

` "`map-second(f, prs)` - apply f to second elements of all pairs in list of pairs `prs`."
map-second(f, prs): map(bimap(identity, f), prs)

` "`map-kv(f, b)` - apply `f(k, v)` to each key / value pair in block `b`, returning list."
map-kv(f, b): b elements map(uncurry(f))

` "`map-as-block(f, syms)` - map each symbol in `syms` and create block mapping `syms` to mapped values."
map-as-block(f, syms): syms map({k: •}.[k, f(k)]) block

` "`pair(k, v)` - form a block element from key (symbol) `k` and value `v`."
pair(k, v): [k, v]

` "`zip-kv(ks, vs)` - create a block by zipping together keys `ks` and values `vs`."
zip-kv(ks, vs): zip-with(pair, ks, vs) block

` "`with-keys(ks)` - create block from list of values by assigning list of keys `ks` against them"
with-keys: zip-kv

` "`map-values(f, b)` - apply `f(v)` to each value in block `b`."
map-values(f, b): b elements map-second(f) block

` "`map-keys(f, b)` - apply `f(k)` to each key in block `b`."
map-keys(f, b): b elements map-first(f) block

` "`filter-items(f, b)` - return items from block `b` which match item match function `f`"
filter-items(f, b): b elements filter(f) 

` "`by-key(p?)` - return item match function that checks predicate `p?` against the (symbol) key."
by-key(p?): p? ∘ key

` "`by-key-name(p?)` - return item match function that checks predicate `p?` against string representation of the key."
by-key-name(p?): p? ∘ str.of ∘ key

` "`by-key-match(re)` - return item match function that checks string representation of the key matches regex `re`."
by-key-match(re): by-key-name(str.matches?(re))

` "`by-value(p?) - return item match runction that checks predicate `p?` against the item value."
by-value(p?): p? ∘ value

` "`match-filter-values` - return list of values from block `b` with keys matching regex `re`."
match-filter-values(re, b): b filter-items(by-key-match(re)) map(value)

` "`filter-values(p?, b)` - return items from block `b` where values match predicate `p?`"
filter-values(p?, b): b values filter(p?)

_block: {
  ` "If `k` satisfies `k?` then `v!` else `v`"
  alter?(k?, v!, k, v): [k, if(k k?, v!, v)]

  ` "If `k` satisfies `k?` then `v!` else `v`"
  update?(k?, f, k, v): [k, if(k k?, v f, v)]
}

# By property alteration of blocks

` "`alter-value(k, v, b)` - alter `b.k` to value `v`."
alter-value(k, v, b): b map-kv(_block.alter?(= k, v)) block

` "`update-value(k, f, b)` - update  `b.k` to `f(b.k)`."
update-value(k, f, b): b map-kv(_block.update?(= k, f)) block

` "`alter(ks, v, b)` - in nested block `b` alter value to value `v` at path-of-keys `ks`"
alter(ks, v, b): b foldr(update-value, const(v), ks)

` "`update(ks, f, b)` - in nested block `b` applying `f` to value at path-of-keys `ks`"
update(ks, f, b): b foldr(update-value, f, ks)

` "update-value-or(k, f, d, b) - set `b.k` to `f(v)` where v is current value, otherwise add with default value `d`."
update-value-or(k, f, d, b): {
  acc(st, el): if(k = (el key),
                  [cons([k, f(el value)], st first), []],
		  [cons(el, st first), st second])
  final-state: foldl(acc,
                     [[], [[k, d]]],
		     b elements)
  final-block: final-state (append flip uncurry) reverse block
}.final-block

` "set-value(k, v, b) - set `b.k` to `v`, adding if absent."
set-value(k, v): update-value-or(k, const(v), v)

` "tongue(ks, v) - construct block with a single nested path-of-keys `ks` down to value `v`"
tongue(ks, v): foldr({k: • e: •}.([[k, e]] block), v, ks) 


` "merge-at(ks, v, b) - shallow merge block `v` into block value at path-of-keys `ks`"
merge-at(ks, v, b): if(ks nil?,
                       merge(b, v),
                       b update-value-or(ks head,
		                                        merge-at(ks tail, v),
                                            tongue(ks tail, v)))



` { export: :suppress
    doc: "Function for working with a human view of time." }
cal: {

  ifields: block ∘__IFIELDS

  now: io.epoch-time ifields
  
  epoch: 0 ifields

  ` "`cal.zdt(y, m, d, H, M, S, Z)` - create zoned date time from datetime components and timezone string (e.g. '+0100')"
  zdt: __ZDT

  ` "`cal.time(b)` - convert block of time fields to time (with 0 / UTC defaults)"
  datetime(b): zdt(b lookup-or(:y, 0),
                   b lookup-or(:m, 0),
	                 b lookup-or(:d, 0),
	                 b lookup-or(:H, 0),
	                 b lookup-or(:M, 0),
	                 b lookup-or(:S, 0),
	                 b lookup-or(:Z, "UTC"))

  ` "cal.parse(s) - parse an ISO8601 formatted date string into a zoned date time."
  parse: '__ZDT.PARSE'

  ` "cal.format(s) - format a zoned date time as ISO8601."
  format: '__ZDT.FORMAT'

  ` "cal.fields(t) - decompose a zoned date time into a block of its component fields (y,m,d,H,M,S,Z)."
  fields: block ∘ '__ZDT.FIELDS'
}



` { export: :suppress
    doc: "Blocks are implemented either as association lists or as insert
ordered maps and can be silently promoted from association list to the IOSM
implementation. This namespace exposes some primitives for working with the 
IOSM implementation diretly. " }
iosm: {

  ` "Intrinsics for working with unwrapped insert ordered symbol maps"
  Γ: {
    empty: '__IOSM.EMPTY'
    insert: '__IOSM.INSERT'
    wrap: '__IOSM.WRAP'
    unwrap: '__IOSM.UNWRAP'
    list: '__IOSM.LIST'
    insert-kv(k, v, m): insert(m, k, v)
    insert-pair(m, kv): apply(insert(m), kv)
    lookup: '__IOSM.LOOKUP'
    lookup-or: '__IOSM.LOOKUPOR'
    merge: '__IOSM.MERGE'
    from-list: '__IOSM.FROMLIST'
  }

  ` "`iosm.empty` - the empty IOSM (insert-ordered hash map)"
  empty: Γ.wrap(Γ.empty)

  ` "`iosm.insert(k, v, m)` - insert value `v` at key symbol `k` into IOSM `m`"
  insert(k, v, m): m Γ.unwrap Γ.insert-kv(k, v) Γ.wrap

  ` "`iosm.from-elements(xs)` - construct IOSM (insert-ordered hash map) from list `xs` of key-value pairs"
  from-elements(xs): xs Γ.from-list Γ.wrap

  ` "`iosm.from(b)` - construct IOSM (insert-ordered hash map) from block"
  from(b): b __ELEMENTS Γ.from-list Γ.wrap

` "`iosm.lookup(k, m)` - retrieve value from IOSM `m` at key symbol `k`, error if none"
  lookup(k, m): m Γ.unwrap flip(Γ.lookup, k)

  ` "`iosm.lookup-or(k, v, m)` - retrieve value from IOSM `m` at key symbol `k`, default `d` if none"
  lookup-or(k, d, m): Γ.lookup-or(m Γ.unwrap, k, d)

  ` "`iosm.merge(l, r)` - shallow merge IOSM `r` into IOSM `l`"
  merge(l, r): Γ.merge(Γ.unwrap(l), Γ.unwrap(r)) Γ.wrap

  ` "`iosm.deep-merge(l, r)` - deep merge IOSM `r` into IOSM `l`"
  deep-merge: '__IOSMBLOCK.DEEPMERGE'

  ` "`iosm.elements(m)` - return list of key value pairs from IOSM `m`"
  elements(m): m Γ.unwrap Γ.list 
}
