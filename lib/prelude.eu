# -*- mode: conf -*-

# Eucalypt standard prelude
#
# WARNING: this is merely a sketch at present.

# Prelude versioning and run metadata
` { export: :suppress }
eu: {
  ` "Metadata about this version of the standard prelude"
  prelude: {
    version: "0.0.1"
  }

  ` "Metadata about this version of the eucalypt executable"
  build: {
    version: __build.version
    commit: __build.eu-build.commit
    url: __build.eu-build.url
  }
}

` { doc: "IO related declarations"
    export: :suppress }
io: {
  ` "Read access to environent variables at time of launch"
  env: __io.ENV

  epoch-time: __io.EPOCHTIME
}



TODO(x): ""

##
## Error / debug support
##

` { doc: "`panic(s)` - raise runtime error with message string `s`."
    export: :suppress }
panic: __PANIC

` { doc: "`trace(v)` - equivalent to `v` but trace execution"
    export: :suppress }
trace: TODO(__TRACE)

` { doc: "`assert(c, s, v)` - if `c` is true then value `v` otherwise error with message `s`."
    example: { foo: bar assert(bar >= 0, "negative foo") }
    export: :suppress }
assert(c, s, v): if(c, v, panic(s))

##
## Essentials
##

` { doc: "A null value. To export as `null` in JSON or ~ in YAML."
    export: :suppress }
null: __NULL

` { doc: "`cat(a, b)` - explicit catenation, cat(a, b) = a b. Useful in folds etc."
    export: :suppress }
cat: TODO(__CAT)

` { doc: "`if(c, t, f)` - if `c` is `true`, return `t` else `f`."
    export: :suppress }
if: __IF

##
## List basics
##

` { doc: "`cons(h, t)` - construct new list by prepending item `h` to list `t`."
    example: cons(0,[1,2]) //=> [0,1,2]
    export: :suppress }
cons: __CONS

` { doc: "`head(l)` - return the head item of list `l`, error if empty."
    export: :suppress }
head: __HEAD

# ` { doc: "`head-or(l, d)` - return the head item of list `l` or default `d` if empty."
#     export: :suppress }
# head-or: __HEADOR

` { doc: "`tail(l)` - return list `l` without the head item. [] causes error."
    export: :suppress }
tail: __TAIL

` { doc: "`nil` - identical to `[]`, the empty list."
    export: :suppress }
nil: []

##
## Blocks / merge
##

` { doc: "`sym(s)` - create symbol with name given by string `s`."
    export: :suppress }
sym: __SYM

` { doc: "`merge(b1, b2)` - shallow merge block `b2` on top of `b1`."
    export: :suppress }
merge: __MERGE

` { doc: "`elements(b)` - expose list of elements of block `b`."
    export: :suppress }
elements: __ELEMENTS

` { doc: "`block(l)` - (re)construct block from list `l` of elements."
    export: :suppress }
block: __BLOCK

` { doc: "`has(s, b)` - true if and only if block `b` has key (symbol) `s`."
    export: :suppress }
has(s, b): TODO(__HAS(b, s))

` { doc: "`lookup(s, b)` - look up symbol `s` in block `b`, error if not found."
    export: :suppress }
lookup(s, b): __LOOKUP(s, b)

` { doc: "`lookup-or(s, d, b)` - look up symbol `s` in block `b`, default `d` if not found."
    export: :suppress }
lookup-or(s, d, b): __LOOKUPOR(s, d, b)

` { doc: "`lookup-or-in(b, s, d)` - look up symbol `s` in block `b`, default `d` if not found."
    export: :suppress }
lookup-or-in(b, s, d): lookup-or(s, d, b)

` { doc: "`lookup-alts(syms, d)` - look up symbols `syms` in turn in block `b` until a value is found, default `d` if none."
    export: :suppress }
lookup-alts(syms, d, b): foldr(lookup-or-in(b), syms, d)

##
## Boolean
##

` { doc: "`not(b) - toggle boolean.`"
    export: :suppress }
not: __NOT

` { doc: "`l && r`` - true if and only if `l` and `r`"
    export: :suppress
    associates: :left
    precedence: :bool-prod }
(l && r): __AND(l, r)

` { doc: "`l ∧ r`` - true if and only if `l` and `r`"
    export: :suppress
    associates: :left
    precedence: :bool-prod }
(l ∧ r): l && r

` { doc: "`l || r`` - true if and only if `l` or `r`"
    export: :suppress
    associates: :left
    precedence: :bool-sum }
(l || r): __OR(l, r)

` { doc: "`l ∨ r`` - true if and only if `l` or `r`"
    export: :suppress
    associates: :left
    precedence: :bool-sum }
(l ∨ r): l || r

##
## Polymorphic equality
##

` { doc: "`l = r` - `true` if and only if value `l` equals value `r`."
    export: :suppress
    associates: :left
    precedence: :eq }
(l = r): __EQ(l, r)

` { doc: "`l != r` - `true` if and only if value `l` is not equal to value `r`."
    export: :suppress
    associates: :left
    precedence: :eq }
(l != r): not(__EQ(l, r))

##
## Arithmetic
##

` { doc: "`l + r` - adds `l` and `r`; both must be numbers."
    export: :suppress
    associates: :left
    precedence: :sum }
(l + r): __ADD(l, r)

` { doc: "`l - r` - subtracts `r` from `l`; both must be numbers."
    export: :suppress
    associates: :left
    precedence: :sum }
(l - r): __SUB(l, r)

` { doc: "`l * r` - multiplies `l` and `r`; both must be numbers."
    export: :suppress
    associates: :left
    precedence: :prod }
(l * r): __MUL(l, r)

` { doc: "`l / r` - divides `l` by `r`; both must be numbers; error `r` is zero."
    export: :suppress
    associates: :left
    precedence: :prod }
(l / r): __DIV(l, r)

` { doc: "`l < r` - `true` if and only if number `l` is less than number `r`."
    export: :suppress
    associates: :left
    precedence: :cmp }
(l < r): __LT(l, r)

` { doc: "`l > r` - `true` if and only if number `l` is greater than number `r`."
    export: :suppress
    associates: :left
    precedence: :cmp }
(l > r): __GT(l, r)

` { doc: "`l <= r` - `true` if and only if number `l` is less than or equal to number `r`."
    export: :suppress
    associates: :left
    precedence: :cmp }
(l <= r): __LTE(l, r)

` { doc: "`l >= r` - `true` if and only if number `l` is greater than or equal to number `r`."
    export: :suppress
    associates: :left
    precedence: :cmp }
(l >= r): __GTE(l, r)

` { doc: "`inc(x)` - increment number `x` by 1."
    export: :suppress }
inc(x): x + 1

` { doc: "`dec(x)` - decrement number `x` by 1."
    export: :suppress }
dec(x): x - 1

` { doc: "`zero?(n)` - return true if and only if integer `n` is 0."
    export: :suppress }
zero?(n): n = 0

##
## Text and regexes
##

` :suppress
str: {

  ` { doc: "of(e) - convert `e` to string."
      export: :suppress }
  of: __STR

  ` { doc: "split(s, re) - split string `s` on separators matching regex `re`."
      export: :suppress }
  split: __SPLIT

  ` { doc: "split-on(re, s) - split string `s` on separators matching regex `re`."
      export: :suppress }
  split-on: split flip

  ` { doc: "join(l, s) - join list of strings `l` by interposing string s."
      export: :suppress }
  join: __JOIN

  ` { doc: "join-on(s, l) - join list of strings `l` by interposing string s."
      export: :suppress }
  join-on: join flip

  ` { doc: "match(s, re) - match string `s` using regex `re`, return list of full match then capture groups."
      export: :suppress }
  match: __MATCH

  ` { doc: "match-with(re, s) - match string `s` using regex `re`, return list of full match then capture groups."
      export: :suppress }
  match-with: match flip

  ` { doc: "matches(s, re) - return list of all matches in string `s` of regex `re`."
      export: :suppress }
  matches: __MATCHES

  ` { doc: "matches-of(re, s) - return list of all matches in string `s` of regex `re`."
      export: :suppress }
  matches-of: matches flip

  ` { doc: "match(s, re) - match string `s` using regex `re`, return list of full match then capture groups."
      export: :suppress }
  matches?(re): match(s, re) (not ∘ nil?)

  ` { doc: "append(b, a) - return string `b` appended to `a`."
      export: :suppress }
  append(b, a): [a, b] join-on("")

  ` { doc: "append(b, a) - return string `b` prepended to `a`."
      export: :suppress }
  prepend(b, a): [b, a] join-on("")
}

##
## Combinators
##

` { doc: "`identity(v)` - identity function, return value `v`."
    export: :suppress }
identity(v): v

` { doc: "`compose(f,g,x)` - apply function `f` to `g(x)`."
    export: :suppress }
compose(f, g, x): x g f

` { doc: "`(f ∘ g)` - return composition of `f` and `g`"
    example: (head ∘ tail)([1,2]) //=> 2
    export: :suppress
    associates: :right
    precedence: 88 }
(f ∘ g): compose(f,g)
 
` { doc: "`apply(f, l)` - apply function `f` to arguments in list `l`."
    export: :suppress }
apply(f, l): foldl(cat, f, l)

` { doc: "`flip(f)` - flip arguments of function `f`, flip(f)(x, y) == f(y, x)"
    export: :suppress }
flip(f, x, y): f(y, x)

` { doc: "`complement(p?)` - invert truth value of predicate function."
    export: :suppress }
complement(p?): compose(not, p?)

` { doc: "`first(l)` - return first item of list - error if the list is empty."
    export: :suppress }
first: head

` { doc: "`second(l)` - return second item of list - error if there is none."
    export: :suppress }
second(l): l tail head

` { doc: "`uncurry(f)` - turn f(x, y) into f' that expects [x, y] as a list."
    export: :suppress }
curry(f, x, y): f([x, y])

` { doc: "`uncurry(f)` - turn f(x, y) into f' that expects [x, y] as a list."
    export: :suppress }
uncurry(f, l): f(first(l), second(l))

` { doc: "`cond(l)` - in list `l` of [condition, value] select first true condition and return coresponding vaue. Default `d` if none."
    export: :suppress }
cond(l, d): foldr(l, curry(if), d)

#
# Metadata basic
#

` { doc: "`with-meta m e` - add metadata block `m` to expression `e`."
    export: :suppress }
with-meta: __WITHMETA

` { doc: "`e // m` - add metadata block `m` to expression `e`."
    export: :suppress 
    associates: :left
    precedence: :meta }
(e // m): v with-meta(m)

` { doc: "`meta e` - retrieve expression metadata for e"
    export: :suppress }
meta: __META

` { doc: "`e //=> v` - add metadata to assert expression `e` evaluates to `v` and return value of `e`."
    export: :suppress 
    associates: :left
    precedence: :meta }
(e //=> v): e with-meta({ assert: __EQ(v)})

` { doc: "`e //=? f` - add metadata to assert expression `e` satisfies function `f` and return value of `e`."
    export: :suppress 
    associates: :left
    precedence: :meta }
(e //=? f): e with-meta({ assert: f})


#
# List library functions, maps and folds
#

` { doc: "`nil?(l)` - `true` if list `l` is empty, `false` otherwise."
    example: nil?([1]) //=> false
    export: :suppress }
nil?(l): l = []

` { doc: "`take(n, l)` - return as list the initial segment of integer `n` elements from list `l`."
    export: :suppress }
take(n, l): __IF((n zero?), [], cons(l head, take(n dec, l tail)))

` { doc: "`drop(n, l)` - return as list the result of dropping the initial segment of integer `n` elements from list `l`."
    export: :suppress }
drop(n, l): __IF((n zero?), l, drop(n dec, l tail))

# TODO: Can't use this until lists are exposed to eu as cons is not
# currently lazy enough
` { doc: "`repeat(i)` - return infinite list of instances of item `i`."
    export: :suppress }
repeat(i): __CONS(i, repeat(i))

# TODO: sections
` { doc: "`foldl(op, i, l)` - left fold operator `op` over list `l` starting from value `i` "
    # example: foldl((+), i, [1,2,3]) //=> (((i + 1) + 2) + 3)
    export: :suppress }
foldl(op, i, l): if(l nil?, i, foldl(op, op(i, l head), l tail))

` { doc: "`foldr(op, l, i)` - right fold operator `op` over list `l` ending with value `i` "
    # example: foldr((+), [1,2,3], i) //=> (1 + (2 + (3 + i)))
    export: :suppress }
foldr(op, l, i): if(l nil?, i, op(head(l), foldr(op, tail(l), i)))

# TODO: lambdas
` { doc: "`map(f, l)` - map function `f` over list `l`"
    # example: map(|x|(x+2),[1,2,3]) //=> [3,4,5]
    export: :suppress }
map(f, l): if(l nil?, l, cons(l head f, l tail map(f)))

` { doc: "`f <$> l` - map function `f` over list `l`"
    # example: |x|(x+1) <$> [1,2,3] //=> [2,3,4]
    export: :suppress 
    associates: :left 
    precedence: :map }
(f <$> l): map(f, l)

` { doc: "`map(f, l1, l2)` - map function `f` over lists `l1` and `l2`, stopping when the shorter list is exhausted."
    # example: map2(|x, y|(x+y),[1,2,3],[1,2]) //=> [2,4]
    export: :suppress }
map2(f, l1, l2): if(nil?(l1) || nil?(l2), [], cons(f(l1 head, l2 head), map2(f, l1 tail, l2 tail)))

` { doc: "`cons-if(p?, x, l)` - cons `x` onto beginning of list `l` if it satisfies predicate `p?`."
    export: :suppress }
cons-if(p?, x, l): if(x p?, l cons(x), l)

` { doc: "`filter(p?, l)` - return list of elements of list `l` that satisfy predicate `p?`."
    export: :suppress }
filter(p?, l): foldr(cons-if(p?), [], l)

` { doc: "`remove(p?, l)` - return list of elements of list `l` that do not satisfy predicate `p?`."
    export: :suppress }
remove(p?, l): filter(p? complement)

` { doc: "`l1 ++ l2` - concatenate lists `l1` and `l2`."
    export: :suppress
    associates: :left
    precedence: :append }
(l1 ++ l2): concat(l1, l2)

` :alias
zip-with: map2

` { doc: "`zip-apply(fs, vs)` - apply functions in list `fs` to corresponding values in list `vs`, stopping when shorter list is exhausted."
    export: :suppress }
zip-apply(fs, vs): zip-with(apply1, fs, vs)

` { doc: "`reverse(l) - reverse list `l`"
    # example: reverse([1,2,3]) //=> [3,2,1]
    export: :suppress }
reverse(l): if(l nil?, l, concat(reverse(l), [h(l)]))

#
# Block library functions
#

` { doc: "`merge-all(bs)` - merge all blocks in list `bs` together, later overriding earlier."
    # example: merge-all([{a: 1}, {b: 2}, {a: 3}]) //=> { b: 2 a: 3 }
    }
merge-all(bs): foldl(merge, {}, bs)

` { doc: "`key(el)` - return key in a block element."
    export: :suppress }
key: head

` { doc: "`value(el)` - return key in a block element."
    export: :suppress }
value: second

` { doc: "`bimap(f, g, pr)` - apply f to first item of pair and g to second, return pair."
    export: :suppress }
bimap(f, g, pr): [f(first(pr)), g(second(pr))]

` { doc: "`map-first(f, le)` - apply f to first elements of all pairs in list of pairs `l`."
    export: :suppress }
map-first(f, le): map(bimap(f, identity), le)

` { doc: "`map-second(f, le)` - apply f to second elements of all pairs in list of pairs `l`."
    export: :suppress }
map-second(f, le): map(bimap(identity, f), le)

` { doc: "`on-elements(f, b)` - apply f to each elements of block `b`."
    export: :suppress }
on-elements(f, b): b elements f block

` { doc: "`map-kv(f, b)` - apply `f(k, v)` to each element in block `b`."
    export: :suppress }
map-kv(f, b): b elements map(uncurry(f)) block

` { doc: "`pair(k, v)` - form a block element from key (symbol) `k` and value `v`."
    export: :suppress }
pair(k, v): [k, v]

` { doc: "`zip-kv(ks, ,vs)` - create a block by zipping together keys `ks` and values `vs`."
    export: :suppress }
zip-kv(ks, vs): zip-with(pair, ks, vs) block

` :alias
with-keys: zip-kv

` { doc: "`map-keys(f, b)` - apply `f(v)` to each value in block `b`."
    export: :suppress }
map-values(f, b): b elements map-second(f) block

` { doc: "`map-keys(f, b)` - apply `f(k)` to each key in block `b`."
    export: :suppress }
map-keys(f, b): b elements map-first(f) block
