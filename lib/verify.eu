"eucalypt test verifier

Used by `eu -T` to validate the `evidence.yaml` generated by executing the test plan.
"

` "evidence should contain a top-level `tests` key"
_require: evidence

` { target: :main
    doc: "Process test evidence into result.yaml"}
main: evidence
  set-value(:tests, evidence.tests map-kv(validate-test) block)
  summarise

` "validate a single test by applying expectations to content"
validate-test(k, content): {
  name: k
  val: content.expectations map(apply-to-content(content))
  v: content set-value(:validation, val)
}.[k, v]

` "apply an expectation to the evidence content for a test"
apply-to-content(content, expectation): {
    path: expectation.value str.split-on("\.") map(sym)
    val: content lookup-path(path)
  }.(expectation << { result: val })

` "a single top-level pass / fail for all targets and expectations"
summary(data):
   data.tests values mapcat(_.validation) map(_.result) all(is-pass?) then(:PASS, :FAIL)

` "add an `overall` key describing whether all tests passed"
summarise(data): data set-value(:overall, summary(data))

` "allow :PASS or string PASS as these are round-tripped through yaml"
is-pass?(value): value = :PASS âˆ¨ value = "PASS"
