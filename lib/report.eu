"eucalypt test reporting

Generates HTML report from result.yaml files generated by eucalypt
tester (`eu -T`). "

` "`results` should be a list of result.yaml contents, e.g. gathered using `--collect-as`"
_require: results

` "the main report page wrapping and styles"
page(contents):
  [:html, {},
    [:head, {},
      [:meta, { http-equiv: "Content-Type" content: "text/html; charset=utf-8" }],
      [:title, {}, "Eucalypt Test Report"],
      [:style, { type: "text/css"},
"
        body {{
            font: 14px Helvetica Neue;
            text-rendering: optimizelegibility;
        }}

        .body {{
            width: 960px;
            margin: auto;
        }}

        .sidenav {{
          height: 100%;
          width: 250px;
          position: fixed;
          z-index: 1;
          top: 0;
          left: 0;
          overflow-x: hidden;
          padding-top: 60px;
        }}

        a:link {{
            color: #1F78B4;
            text-decoration: none;
        }}

        h1 {{
            font-size: 36px;
            font-weight: 300;
        }}

        h2 {{
            font-size: 24px;
            font-weight: 300;
        }}

        h3 {{
            font-size: 18px;
            font-weight: 300;
        }}

        table {{
            border-collapse: collapse;
        }}

        table,
        th,
        td {{
            border: 1px solid #888;
        }}

       .pill {{
         align-items: center;
         font-family: Arial, Verdana, sans-serif;
         font-weight: bold;
         font-size: 11px;
         display: inline-block;
         height: 100%;
         white-space: nowrap;
         width: auto;

         position: relative;
         border-radius: 100px;
         line-height: 1;
         padding: 5px 12px 5px 12px;
         text-overflow: ellipsis;
         color: #595959;
         word-break: break-word;

        }}

        .PASS {{
          background: #b4eda0;
        }}

        .FAIL {{
          background: ##ffd5d1;
        }}

        section.stdout {{
          border-left: 3px solid rgb(31, 120, 180);
          padding-left: 8px;
        }}

        section.stderr {{
          border-left: 3px solid rgb(227, 26, 28);
          padding-left: 8px;
        }}

        section.assertions {{
          border-left: 3px solid gray;
          padding-left: 8px;
        }}

"]],
    [:body, {}, [:div, { class: "body" }]  ++ contents]]

toc-item(result): [:tr, {}, [:td, { class: "{result.overall}" }, [:a, {href: "#{result.title}" }, result.title]]]

` "generate HTML table of contents"
toc(results): [:nav, { class: "sidenav"}, [:table, {}] ++ (results map(toc-item))]

detail(results): [:main, {}] ++ (results map(detail-subject))

` "the detailed content for a test subject"
detail-subject(result): [:section, { id: "{result.title}" class: "subject" },
  [:h1, { }, result.title]]
  ++ (result.tests map-kv(detail-test))

stdout(test-data):
  [:section, { class: "stdout"}, [:h4, {}, "stdout"], [:pre, {}, [:code, {}, test-data.stdout str.join-on(ch.n)]]]

stderr(test-data):
  [:section, { class: "stderr"}, [:h4, {}, "stderr"], [:pre, {}, [:code, {}, test-data.stderr str.join-on(ch.n)]]]

assertions(test-data):
  [:section, { class: "assertions"}, [:h4, {}, "assertions"], [:ul, {}]] ++ (test-data.validation map(detail-test-validation))

detail-test(name, test-data):
  [:section, { class: "test" },
    [:h2, {}, "{name}"],
    stdout(test-data),
    stderr(test-data),
    assertions(test-data),
    ]

detail-test-validation(validation):
  [:li, {},
    [:span, { class: "validation" }, validation.name],
    [:span, {}, ": "],
    [:span, { class: "pill {validation.result}"}, validation.result]]

` { target: :main
    format: :html }
main: results juxt(toc, detail) page

` { target: :test
    format: :yaml }
test: main
