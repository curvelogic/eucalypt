"eucalypt tester support

Used by the in-built test framework invoked by `eu -T`

- test support functions / assertions
- test result verification (validate `evidence.yaml` resulting from test execution, producing `results.yaml`)
- test report generation (to generate `report.html` from `results.yaml`)
"

` "Validation functions that are available by default

A validation function accepts an evidence context with the following keys:
- `stdout`
- `stderr`
- `result`
- `stats`
- `validation`

as described below and must return :PASS or :FAIL.
"
validation: {
  ` "By default we expect a RESULT key which should be either :PASS or :FAIL"
  default-expectation(context): context.result.RESULT
}


` "Test execution generates evidence consisting of the following top level keys:

- `stdout` - text as list of strings
- `stderr` - text as list of strings
- `result` - output reparsed into eucalypt data structures
- `stats` - metrics collected during execution
- `validation` - the validations that verification must apply

These validations typically assert something about `result` but in
principle can access other fields too. In particular, `stderr` may be
useful for testing error messages.

Validations must identify single argument functions which can be
applied to result. These may be defined in the test subject itself or
in this library.

"
verification: {

  ` { target: :verify
      doc: "Process test evidence into result.yaml"}
  main: evidence
    set-value(:tests, evidence.tests map-kv(validate-test) block)
    summarise

  ` "validate a single test by applying expectations to content"
  validate-test(k, content): {
    name: k
    val: content.expectations map(apply-to-content(content))
    v: content set-value(:validation, val)
  }.[k, v]

  ` "apply an expectation to the evidence content for a test"
  apply-to-content(content, expectation): {
      f: [validation, subject] lookup-across(expectation.function-key sym, const(:FAIL))
      val: f(content)
    }.(expectation << { result: val })

  ` "a single top-level pass / fail for all targets and expectations"
  summary(data):
     data.tests values mapcat(_.validation) map(_.result) all(is-pass?) then(:PASS, :FAIL)

  ` "add an `overall` key describing whether all tests passed"
  summarise(data): data set-value(:overall, summary(data))

  ` "allow :PASS or string PASS as these are round-tripped through yaml"
  is-pass?(value): value = :PASS âˆ¨ value = "PASS"

}

` "HTML test report generation

HTML reports are single page reports, written to `report.html` which
transform the contents of `results.yaml` for viewing in a browser.
They can be automatically opened in a browser at the end of a test run
using the `-O` switch.

 "
reporting: {

  ` "the main report page wrapping and styles"
  page(contents):
    [:html, {},
      [:head, {},
        [:meta, { http-equiv: "Content-Type" content: "text/html; charset=utf-8" }],
        [:title, {}, "Eucalypt Test Report"],
        [:style, { type: "text/css"},
        "
          body {{
              font: 14px Helvetica Neue;
              text-rendering: optimizelegibility;
          }}

          .body {{
              width: 960px;
              margin: auto;
          }}

          .sidenav {{
            height: 100%;
            width: 250px;
            position: fixed;
            z-index: 1;
            top: 0;
            left: 0;
            overflow-x: hidden;
            padding-top: 60px;
          }}

          a:link {{
              color: #1F78B4;
              text-decoration: none;
          }}

          h1 {{
              font-size: 36px;
              font-weight: 300;
          }}

          h2 {{
              font-size: 24px;
              font-weight: 300;
          }}

          h3 {{
              font-size: 18px;
              font-weight: 300;
          }}

          table {{
              border-collapse: collapse;
          }}

          table,
          th,
          td {{
              border: 1px solid #888;
              padding: 2px;
          }}

         .pill {{
           align-items: center;
           font-family: Arial, Verdana, sans-serif;
           font-weight: bold;
           font-size: 11px;
           display: inline-block;
           height: 100%;
           white-space: nowrap;
           width: auto;

           position: relative;
           border-radius: 100px;
           line-height: 1;
           padding: 5px 12px 5px 12px;
           text-overflow: ellipsis;
           color: #595959;
           word-break: break-word;

          }}

          .PASS {{
            background: #b4eda0;
          }}

          .FAIL {{
            background: #ffd5d1;
          }}

          section.stdout {{
            border-left: 3px solid rgb(31, 120, 180);
            padding-left: 8px;
          }}

          section.stderr {{
            border-left: 3px solid rgb(227, 26, 28);
            padding-left: 8px;
          }}

          section.assertions {{
            border-left: 3px solid gray;
            padding-left: 8px;
          }}

          section.stats {{
            border-left: 3px solid rgb(224,202,60);
            padding-left: 8px;
          }}


  "]],
      [:body, {}, [:div, { class: "body" }]  ++ contents]]

  toc-item(result): [:tr, {}, [:td, { class: "{result.overall}" }, [:a, {href: "#{result.title}" }, result.title]]]

  ` "generate HTML table of contents"
  toc(results): [:nav, { class: "sidenav"}, [:table, {}] ++ (results map(toc-item))]

  detail(results): [:main, {}] ++ (results map(detail-subject))

  ` "the detailed content for a test subject"
  detail-subject(result): [:section, { id: "{result.title}" class: "subject" },
    [:h1, { }, result.title]]
    ++ (result.tests map-kv(detail-test))

  stdout(test-data):
    [:section, { class: "stdout"}, [:h4, {}, "stdout"], [:pre, {}, [:code, {}, test-data.stdout str.join-on(ch.n)]]]

  stderr(test-data):
    [:section, { class: "stderr"}, [:h4, {}, "stderr"], [:pre, {}, [:code, {}, test-data.stderr str.join-on(ch.n)]]]

  assertions(test-data):
    [:section, { class: "assertions"}, [:h4, {}, "assertions"], [:ul, {}]] ++ (test-data.validation map(detail-test-validation))

  stats(test-data):
    [:section, { class: "stats" },
      [:h4, {}, "stats"],
      [:table, {},
      [:tr, {}, [:th, {}, "ticks"], [:td, {}, "{test-data.stats.ticks}"]],
      [:tr, {}, [:th, {}, "allocs"], [:td, {}, "{test-data.stats.allocs}"]],
      [:tr, {}, [:th, {}, "max-stack"], [:td, {}, "{test-data.stats.max-stack}"]]]]

  detail-test(name, test-data):
    [:section, { class: "test" },
      [:h2, {}, "{name}"],
      stdout(test-data),
      stderr(test-data),
      assertions(test-data),
      stats(test-data),
      ]

  detail-test-validation(validation):
    [:li, {},
      [:span, { class: "validation" }, validation.name],
      [:span, {}, ": "],
      [:span, { class: "pill {validation.result}"}, validation.result]]

  ` { target: :generate-report
      format: :html }
  main: results juxt(toc, detail) page

}
